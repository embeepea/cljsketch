;; Analyzed by ClojureScript 0.0-3297
{:use-macros nil, :excludes #{}, :name cljsketch.refgeom, :imports nil, :requires {v cljsketch.vector, cljsketch.vector cljsketch.vector, g cljsketch.geom, cljsketch.geom cljsketch.geom}, :uses nil, :defs {map->CenterPointCircle {:protocol-inline nil, :meta {:file "/home/mbp/cljsketch/src/cljsketch/refgeom.cljs", :line 97, :column 12, :end-line 97, :end-column 29, :internal-ctor true, :factory :map, :arglists (quote ([G__24597]))}, :name cljsketch.refgeom/map->CenterPointCircle, :variadic false, :file "src/cljsketch/refgeom.cljs", :end-column 29, :method-params ([G__24597]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 97, :end-line 97, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__24597]))}, toGeom {:protocol-inline nil, :meta {:file "/home/mbp/cljsketch/src/cljsketch/refgeom.cljs", :line 8, :column 4, :end-line 8, :end-column 10, :protocol cljsketch.refgeom/IRefGeom, :doc "return a geom for this refgeom", :arglists (quote ([this geommap]))}, :protocol cljsketch.refgeom/IRefGeom, :name cljsketch.refgeom/toGeom, :variadic false, :file "src/cljsketch/refgeom.cljs", :end-column 10, :method-params ([this geommap]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 5, :end-line 8, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this geommap])), :doc "return a geom for this refgeom"}, ->SegmentMidPoint {:protocol-inline nil, :meta {:file "/home/mbp/cljsketch/src/cljsketch/refgeom.cljs", :line 84, :column 12, :end-line 84, :end-column 27, :internal-ctor true, :factory :positional, :arglists (quote ([sg]))}, :name cljsketch.refgeom/->SegmentMidPoint, :variadic false, :file "src/cljsketch/refgeom.cljs", :end-column 27, :method-params ([sg]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 84, :end-line 84, :max-fixed-arity 1, :fn-var true, :arglists (quote ([sg]))}, ->Point {:protocol-inline nil, :meta {:file "/home/mbp/cljsketch/src/cljsketch/refgeom.cljs", :line 15, :column 12, :end-line 15, :end-column 17, :internal-ctor true, :factory :positional, :arglists (quote ([p]))}, :name cljsketch.refgeom/->Point, :variadic false, :file "src/cljsketch/refgeom.cljs", :end-column 17, :method-params ([p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 15, :end-line 15, :max-fixed-arity 1, :fn-var true, :arglists (quote ([p]))}, dependencies {:protocol-inline nil, :meta {:file "/home/mbp/cljsketch/src/cljsketch/refgeom.cljs", :line 141, :column 7, :end-line 141, :end-column 19, :arglists (quote ([at]))}, :name cljsketch.refgeom/dependencies, :variadic false, :file "src/cljsketch/refgeom.cljs", :end-column 19, :method-params ([at]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 141, :end-line 141, :max-fixed-arity 1, :fn-var true, :arglists (quote ([at]))}, ->PointPerpendicularLine {:protocol-inline nil, :meta {:file "/home/mbp/cljsketch/src/cljsketch/refgeom.cljs", :line 53, :column 12, :end-line 53, :end-column 34, :internal-ctor true, :factory :positional, :arglists (quote ([pt ln-sg]))}, :name cljsketch.refgeom/->PointPerpendicularLine, :variadic false, :file "src/cljsketch/refgeom.cljs", :end-column 34, :method-params ([pt ln-sg]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 53, :end-line 53, :max-fixed-arity 2, :fn-var true, :arglists (quote ([pt ln-sg]))}, PointPointSegment {:num-fields 2, :protocols #{cljs.core/IRecord cljsketch.refgeom/IRefGeom cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name cljsketch.refgeom/PointPointSegment, :file "src/cljsketch/refgeom.cljs", :end-column 29, :type true, :column 12, :internal-ctor true, :line 22, :record true, :end-line 22, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, deps {:protocol-inline nil, :meta {:file "/home/mbp/cljsketch/src/cljsketch/refgeom.cljs", :line 9, :column 4, :end-line 9, :end-column 8, :protocol cljsketch.refgeom/IRefGeom, :doc "return a sequence of atoms referring to the objects\n    (Geoms or RefGeoms) that this RefGeom depends on", :arglists (quote ([this]))}, :protocol cljsketch.refgeom/IRefGeom, :name cljsketch.refgeom/deps, :variadic false, :file "src/cljsketch/refgeom.cljs", :end-column 8, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 5, :end-line 9, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "return a sequence of atoms referring to the objects\n    (Geoms or RefGeoms) that this RefGeom depends on"}, PointPointLine {:num-fields 2, :protocols #{cljs.core/IRecord cljsketch.refgeom/IRefGeom cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name cljsketch.refgeom/PointPointLine, :file "src/cljsketch/refgeom.cljs", :end-column 26, :type true, :column 12, :internal-ctor true, :line 32, :record true, :end-line 32, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, map->PointPointSegment {:protocol-inline nil, :meta {:file "/home/mbp/cljsketch/src/cljsketch/refgeom.cljs", :line 22, :column 12, :end-line 22, :end-column 29, :internal-ctor true, :factory :map, :arglists (quote ([G__24543]))}, :name cljsketch.refgeom/map->PointPointSegment, :variadic false, :file "src/cljsketch/refgeom.cljs", :end-column 29, :method-params ([G__24543]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 22, :end-line 22, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__24543]))}, ->CenterPointCircle {:protocol-inline nil, :meta {:file "/home/mbp/cljsketch/src/cljsketch/refgeom.cljs", :line 97, :column 12, :end-line 97, :end-column 29, :internal-ctor true, :factory :positional, :arglists (quote ([c p]))}, :name cljsketch.refgeom/->CenterPointCircle, :variadic false, :file "src/cljsketch/refgeom.cljs", :end-column 29, :method-params ([c p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 97, :end-line 97, :max-fixed-arity 2, :fn-var true, :arglists (quote ([c p]))}, CenterPointCircle {:num-fields 2, :protocols #{cljs.core/IRecord cljsketch.refgeom/IRefGeom cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name cljsketch.refgeom/CenterPointCircle, :file "src/cljsketch/refgeom.cljs", :end-column 29, :type true, :column 12, :internal-ctor true, :line 97, :record true, :end-line 97, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, ->PointPointSegment {:protocol-inline nil, :meta {:file "/home/mbp/cljsketch/src/cljsketch/refgeom.cljs", :line 22, :column 12, :end-line 22, :end-column 29, :internal-ctor true, :factory :positional, :arglists (quote ([pt0 pt1]))}, :name cljsketch.refgeom/->PointPointSegment, :variadic false, :file "src/cljsketch/refgeom.cljs", :end-column 29, :method-params ([pt0 pt1]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 22, :end-line 22, :max-fixed-arity 2, :fn-var true, :arglists (quote ([pt0 pt1]))}, ->LineLinePoint {:protocol-inline nil, :meta {:file "/home/mbp/cljsketch/src/cljsketch/refgeom.cljs", :line 73, :column 12, :end-line 73, :end-column 25, :internal-ctor true, :factory :positional, :arglists (quote ([ln0 ln1]))}, :name cljsketch.refgeom/->LineLinePoint, :variadic false, :file "src/cljsketch/refgeom.cljs", :end-column 25, :method-params ([ln0 ln1]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 73, :end-line 73, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ln0 ln1]))}, dependents {:protocol-inline nil, :meta {:file "/home/mbp/cljsketch/src/cljsketch/refgeom.cljs", :line 165, :column 7, :end-line 165, :end-column 17, :arglists (quote ([world at]))}, :name cljsketch.refgeom/dependents, :variadic false, :file "src/cljsketch/refgeom.cljs", :end-column 17, :method-params ([world at]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 165, :end-line 165, :max-fixed-arity 2, :fn-var true, :arglists (quote ([world at]))}, map->Point {:protocol-inline nil, :meta {:file "/home/mbp/cljsketch/src/cljsketch/refgeom.cljs", :line 15, :column 12, :end-line 15, :end-column 17, :internal-ctor true, :factory :map, :arglists (quote ([G__24535]))}, :name cljsketch.refgeom/map->Point, :variadic false, :file "src/cljsketch/refgeom.cljs", :end-column 17, :method-params ([G__24535]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 15, :end-line 15, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__24535]))}, inverse {:protocol-inline nil, :meta {:file "/home/mbp/cljsketch/src/cljsketch/refgeom.cljs", :line 149, :column 7, :end-line 149, :end-column 14, :arglists (quote ([world]))}, :name cljsketch.refgeom/inverse, :variadic false, :file "src/cljsketch/refgeom.cljs", :end-column 14, :method-params ([world]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 149, :end-line 149, :max-fixed-arity 1, :fn-var true, :arglists (quote ([world]))}, map->PointParallelLine {:protocol-inline nil, :meta {:file "/home/mbp/cljsketch/src/cljsketch/refgeom.cljs", :line 63, :column 12, :end-line 63, :end-column 29, :internal-ctor true, :factory :map, :arglists (quote ([G__24573]))}, :name cljsketch.refgeom/map->PointParallelLine, :variadic false, :file "src/cljsketch/refgeom.cljs", :end-column 29, :method-params ([G__24573]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 63, :end-line 63, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__24573]))}, IRefGeom {:meta {:file "/home/mbp/cljsketch/src/cljsketch/refgeom.cljs", :line 5, :column 14, :end-line 5, :end-column 22, :doc nil, :protocol-symbol true, :protocol-info {:methods {toGeom [[this geommap]], deps [[this]], geom-type [[this]]}}}, :protocol-symbol true, :name cljsketch.refgeom/IRefGeom, :file "src/cljsketch/refgeom.cljs", :end-column 22, :column 1, :line 5, :protocol-info {:methods {toGeom [[this geommap]], deps [[this]], geom-type [[this]]}}, :info nil, :end-line 5, :impls #{cljsketch.refgeom/PointParallelLine cljsketch.refgeom/Point cljsketch.refgeom/SegmentMidPoint cljsketch.refgeom/LineLinePoint cljsketch.refgeom/PointPerpendicularLine cljsketch.refgeom/PointPointSegment cljsketch.refgeom/PointPointLine cljsketch.refgeom/CenterPointCircle}, :doc nil}, geommap {:protocol-inline nil, :meta {:file "/home/mbp/cljsketch/src/cljsketch/refgeom.cljs", :line 116, :column 7, :end-line 116, :end-column 14, :arglists (quote ([atoms]))}, :name cljsketch.refgeom/geommap, :variadic false, :file "src/cljsketch/refgeom.cljs", :end-column 14, :method-params ([atoms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 116, :end-line 116, :max-fixed-arity 1, :fn-var true, :arglists (quote ([atoms]))}, PointParallelLine {:num-fields 2, :protocols #{cljs.core/IRecord cljsketch.refgeom/IRefGeom cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name cljsketch.refgeom/PointParallelLine, :file "src/cljsketch/refgeom.cljs", :end-column 29, :type true, :column 12, :internal-ctor true, :line 63, :record true, :end-line 63, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, lineal-projective-vector {:protocol-inline nil, :meta {:file "/home/mbp/cljsketch/src/cljsketch/refgeom.cljs", :line 44, :column 7, :end-line 44, :end-column 31, :arglists (quote ([geommap ln-sg]))}, :name cljsketch.refgeom/lineal-projective-vector, :variadic false, :file "src/cljsketch/refgeom.cljs", :end-column 31, :method-params ([geommap ln-sg]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 44, :end-line 44, :max-fixed-arity 2, :fn-var true, :arglists (quote ([geommap ln-sg]))}, ->PointParallelLine {:protocol-inline nil, :meta {:file "/home/mbp/cljsketch/src/cljsketch/refgeom.cljs", :line 63, :column 12, :end-line 63, :end-column 29, :internal-ctor true, :factory :positional, :arglists (quote ([pt ln-sg]))}, :name cljsketch.refgeom/->PointParallelLine, :variadic false, :file "src/cljsketch/refgeom.cljs", :end-column 29, :method-params ([pt ln-sg]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 63, :end-line 63, :max-fixed-arity 2, :fn-var true, :arglists (quote ([pt ln-sg]))}, traverse-dfs {:protocol-inline nil, :meta {:file "/home/mbp/cljsketch/src/cljsketch/refgeom.cljs", :line 127, :column 7, :end-line 127, :end-column 19, :arglists (quote ([g s]))}, :name cljsketch.refgeom/traverse-dfs, :variadic false, :file "src/cljsketch/refgeom.cljs", :end-column 19, :method-params ([g s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 127, :end-line 127, :max-fixed-arity 2, :fn-var true, :arglists (quote ([g s]))}, map->PointPointLine {:protocol-inline nil, :meta {:file "/home/mbp/cljsketch/src/cljsketch/refgeom.cljs", :line 32, :column 12, :end-line 32, :end-column 26, :internal-ctor true, :factory :map, :arglists (quote ([G__24551]))}, :name cljsketch.refgeom/map->PointPointLine, :variadic false, :file "src/cljsketch/refgeom.cljs", :end-column 26, :method-params ([G__24551]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 32, :end-line 32, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__24551]))}, map->LineLinePoint {:protocol-inline nil, :meta {:file "/home/mbp/cljsketch/src/cljsketch/refgeom.cljs", :line 73, :column 12, :end-line 73, :end-column 25, :internal-ctor true, :factory :map, :arglists (quote ([G__24581]))}, :name cljsketch.refgeom/map->LineLinePoint, :variadic false, :file "src/cljsketch/refgeom.cljs", :end-column 25, :method-params ([G__24581]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 73, :end-line 73, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__24581]))}, map->PointPerpendicularLine {:protocol-inline nil, :meta {:file "/home/mbp/cljsketch/src/cljsketch/refgeom.cljs", :line 53, :column 12, :end-line 53, :end-column 34, :internal-ctor true, :factory :map, :arglists (quote ([G__24565]))}, :name cljsketch.refgeom/map->PointPerpendicularLine, :variadic false, :file "src/cljsketch/refgeom.cljs", :end-column 34, :method-params ([G__24565]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 53, :end-line 53, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__24565]))}, ->PointPointLine {:protocol-inline nil, :meta {:file "/home/mbp/cljsketch/src/cljsketch/refgeom.cljs", :line 32, :column 12, :end-line 32, :end-column 26, :internal-ctor true, :factory :positional, :arglists (quote ([pt0 pt1]))}, :name cljsketch.refgeom/->PointPointLine, :variadic false, :file "src/cljsketch/refgeom.cljs", :end-column 26, :method-params ([pt0 pt1]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 32, :end-line 32, :max-fixed-arity 2, :fn-var true, :arglists (quote ([pt0 pt1]))}, map->SegmentMidPoint {:protocol-inline nil, :meta {:file "/home/mbp/cljsketch/src/cljsketch/refgeom.cljs", :line 84, :column 12, :end-line 84, :end-column 27, :internal-ctor true, :factory :map, :arglists (quote ([G__24589]))}, :name cljsketch.refgeom/map->SegmentMidPoint, :variadic false, :file "src/cljsketch/refgeom.cljs", :end-column 27, :method-params ([G__24589]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 84, :end-line 84, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__24589]))}, Point {:num-fields 1, :protocols #{cljs.core/IRecord cljsketch.refgeom/IRefGeom cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name cljsketch.refgeom/Point, :file "src/cljsketch/refgeom.cljs", :end-column 17, :type true, :column 12, :internal-ctor true, :line 15, :record true, :end-line 15, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, SegmentMidPoint {:num-fields 1, :protocols #{cljs.core/IRecord cljsketch.refgeom/IRefGeom cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name cljsketch.refgeom/SegmentMidPoint, :file "src/cljsketch/refgeom.cljs", :end-column 27, :type true, :column 12, :internal-ctor true, :line 84, :record true, :end-line 84, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, LineLinePoint {:num-fields 2, :protocols #{cljs.core/IRecord cljsketch.refgeom/IRefGeom cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name cljsketch.refgeom/LineLinePoint, :file "src/cljsketch/refgeom.cljs", :end-column 25, :type true, :column 12, :internal-ctor true, :line 73, :record true, :end-line 73, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, geom-type {:protocol-inline nil, :meta {:file "/home/mbp/cljsketch/src/cljsketch/refgeom.cljs", :line 11, :column 4, :end-line 11, :end-column 13, :protocol cljsketch.refgeom/IRefGeom, :doc "", :arglists (quote ([this]))}, :protocol cljsketch.refgeom/IRefGeom, :name cljsketch.refgeom/geom-type, :variadic false, :file "src/cljsketch/refgeom.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 5, :end-line 11, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc ""}, PointPerpendicularLine {:num-fields 2, :protocols #{cljs.core/IRecord cljsketch.refgeom/IRefGeom cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name cljsketch.refgeom/PointPerpendicularLine, :file "src/cljsketch/refgeom.cljs", :end-column 34, :type true, :column 12, :internal-ctor true, :line 53, :record true, :end-line 53, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:pt :pt0 :ln0 :y1 :sg :pt1 :c :y0 :x1 :ln1 :ln-sg :x0 :p :u}, :order [:p :pt0 :pt1 :u :x0 :y0 :x1 :y1 :pt :ln-sg :ln0 :ln1 :sg :c]}, :doc nil}