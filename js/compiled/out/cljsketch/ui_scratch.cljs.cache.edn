;; Analyzed by ClojureScript 0.0-3297
{:use-macros {go cljs.core.async.macros}, :excludes #{}, :name cljsketch.ui-scratch, :imports nil, :requires {dom om.dom, om-tools.dom om-tools.dom, om-bootstrap.grid om-bootstrap.grid, om.dom om.dom, cljs.core.async cljs.core.async, om-bootstrap.nav om-bootstrap.nav, n om-bootstrap.nav, events goog.events, om.core om.core, om om.core, g om-bootstrap.grid, om-bootstrap.button om-bootstrap.button, goog.events goog.events, b om-bootstrap.button, d om-tools.dom}, :uses {<! cljs.core.async, chan cljs.core.async, put! cljs.core.async}, :defs {launch {:protocol-inline nil, :meta {:file "/home/mbp/cljsketch/src/cljsketch/ui_scratch.cljs", :line 14, :column 7, :end-line 14, :end-column 13, :arglists (quote ([app-state id run-app]))}, :name cljsketch.ui-scratch/launch, :variadic false, :file "src/cljsketch/ui_scratch.cljs", :end-column 13, :method-params ([app-state id run-app]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 14, :max-fixed-arity 3, :fn-var true, :arglists (quote ([app-state id run-app]))}, t24125 {:num-fields 7, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :name cljsketch.ui-scratch/t24125, :file "src/cljsketch/ui_scratch.cljs", :type true, :anonymous true, :column 6, :line 17, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->t24125 {:protocol-inline nil, :meta {:anonymous true, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([launch app-state id run-app data owner meta24126])), :file nil}, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :name cljsketch.ui-scratch/->t24125, :variadic false, :file "src/cljsketch/ui_scratch.cljs", :method-params ([launch app-state id run-app data owner meta24126]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 6, :factory :positional, :line 17, :max-fixed-arity 7, :fn-var true, :arglists (quote ([launch app-state id run-app data owner meta24126])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, t24128 {:num-fields 7, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :name cljsketch.ui-scratch/t24128, :file "src/cljsketch/ui_scratch.cljs", :type true, :anonymous true, :column 6, :line 17, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->t24128 {:protocol-inline nil, :meta {:anonymous true, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([launch app-state id run-app data owner meta24129])), :file nil}, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :name cljsketch.ui-scratch/->t24128, :variadic false, :file "src/cljsketch/ui_scratch.cljs", :method-params ([launch app-state id run-app data owner meta24129]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 6, :factory :positional, :line 17, :max-fixed-arity 7, :fn-var true, :arglists (quote ([launch app-state id run-app data owner meta24129])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}}, :require-macros {cljs.core.async.macros cljs.core.async.macros, om om.core, om.core om.core, dom om.dom, om.dom om.dom, d om-tools.dom, om-tools.dom om-tools.dom}, :cljs.analyzer/constants {:seen #{:key :collapsible? :brand :title :target}, :order [:brand :collapsible? :key :title :target]}, :doc nil}