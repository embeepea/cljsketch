;; Analyzed by ClojureScript 0.0-3297
{:use-macros nil, :excludes #{}, :name cljsketch.geom, :imports nil, :requires {v cljsketch.vector, cljsketch.vector cljsketch.vector, gr cljsketch.canvas-graphics, cljsketch.canvas-graphics cljsketch.canvas-graphics}, :uses nil, :defs {->Point {:protocol-inline nil, :meta {:file "/home/mbp/cljsketch/src/cljsketch/geom.cljs", :line 15, :column 12, :end-line 15, :end-column 17, :internal-ctor true, :factory :positional, :arglists (quote ([p]))}, :name cljsketch.geom/->Point, :variadic false, :file "src/cljsketch/geom.cljs", :end-column 17, :method-params ([p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 15, :end-line 15, :max-fixed-arity 1, :fn-var true, :arglists (quote ([p]))}, Circle {:num-fields 3, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljsketch.geom/IGeom cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name cljsketch.geom/Circle, :file "src/cljsketch/geom.cljs", :end-column 18, :type true, :column 12, :internal-ctor true, :line 50, :record true, :end-line 50, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, map->Circle {:protocol-inline nil, :meta {:file "/home/mbp/cljsketch/src/cljsketch/geom.cljs", :line 50, :column 12, :end-line 50, :end-column 18, :internal-ctor true, :factory :map, :arglists (quote ([G__28234]))}, :name cljsketch.geom/map->Circle, :variadic false, :file "src/cljsketch/geom.cljs", :end-column 18, :method-params ([G__28234]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 50, :end-line 50, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__28234]))}, map->Null {:protocol-inline nil, :meta {:file "/home/mbp/cljsketch/src/cljsketch/geom.cljs", :line 10, :column 12, :end-line 10, :end-column 16, :internal-ctor true, :factory :map, :arglists (quote ([G__28190]))}, :name cljsketch.geom/map->Null, :variadic false, :file "src/cljsketch/geom.cljs", :end-column 16, :method-params ([G__28190]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 10, :end-line 10, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__28190]))}, map->Line {:protocol-inline nil, :meta {:file "/home/mbp/cljsketch/src/cljsketch/geom.cljs", :line 24, :column 12, :end-line 24, :end-column 16, :internal-ctor true, :factory :map, :arglists (quote ([G__28211]))}, :name cljsketch.geom/map->Line, :variadic false, :file "src/cljsketch/geom.cljs", :end-column 16, :method-params ([G__28211]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 24, :end-line 24, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__28211]))}, map->Point {:protocol-inline nil, :meta {:file "/home/mbp/cljsketch/src/cljsketch/geom.cljs", :line 15, :column 12, :end-line 15, :end-column 17, :internal-ctor true, :factory :map, :arglists (quote ([G__28200]))}, :name cljsketch.geom/map->Point, :variadic false, :file "src/cljsketch/geom.cljs", :end-column 17, :method-params ([G__28200]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 15, :end-line 15, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__28200]))}, ->Null {:protocol-inline nil, :meta {:file "/home/mbp/cljsketch/src/cljsketch/geom.cljs", :line 10, :column 12, :end-line 10, :end-column 16, :internal-ctor true, :factory :positional, :arglists (quote ([]))}, :name cljsketch.geom/->Null, :variadic false, :file "src/cljsketch/geom.cljs", :end-column 16, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 10, :end-line 10, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, map->Segment {:protocol-inline nil, :meta {:file "/home/mbp/cljsketch/src/cljsketch/geom.cljs", :line 40, :column 12, :end-line 40, :end-column 19, :internal-ctor true, :factory :map, :arglists (quote ([G__28224]))}, :name cljsketch.geom/map->Segment, :variadic false, :file "src/cljsketch/geom.cljs", :end-column 19, :method-params ([G__28224]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 40, :end-line 40, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__28224]))}, ->Segment {:protocol-inline nil, :meta {:file "/home/mbp/cljsketch/src/cljsketch/geom.cljs", :line 40, :column 12, :end-line 40, :end-column 19, :internal-ctor true, :factory :positional, :arglists (quote ([x0 y0 x1 y1]))}, :name cljsketch.geom/->Segment, :variadic false, :file "src/cljsketch/geom.cljs", :end-column 19, :method-params ([x0 y0 x1 y1]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 40, :end-line 40, :max-fixed-arity 4, :fn-var true, :arglists (quote ([x0 y0 x1 y1]))}, ->Line {:protocol-inline nil, :meta {:file "/home/mbp/cljsketch/src/cljsketch/geom.cljs", :line 24, :column 12, :end-line 24, :end-column 16, :internal-ctor true, :factory :positional, :arglists (quote ([u]))}, :name cljsketch.geom/->Line, :variadic false, :file "src/cljsketch/geom.cljs", :end-column 16, :method-params ([u]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 24, :end-line 24, :max-fixed-arity 1, :fn-var true, :arglists (quote ([u]))}, Line {:num-fields 1, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljsketch.geom/IGeom cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name cljsketch.geom/Line, :file "src/cljsketch/geom.cljs", :end-column 16, :type true, :column 12, :internal-ctor true, :line 24, :record true, :end-line 24, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, point-distance2 {:protocol-inline nil, :meta {:file "/home/mbp/cljsketch/src/cljsketch/geom.cljs", :line 7, :column 4, :end-line 7, :end-column 19, :protocol cljsketch.geom/IGeom, :doc "return the square of the distance from this object to point [x y]", :arglists (quote ([this [x y]]))}, :protocol cljsketch.geom/IGeom, :name cljsketch.geom/point-distance2, :variadic false, :file "src/cljsketch/geom.cljs", :end-column 19, :method-params ([this p__28185]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 5, :end-line 7, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this [x y]])), :doc "return the square of the distance from this object to point [x y]"}, Point {:num-fields 1, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljsketch.geom/IGeom cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name cljsketch.geom/Point, :file "src/cljsketch/geom.cljs", :end-column 17, :type true, :column 12, :internal-ctor true, :line 15, :record true, :end-line 15, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, IGeom {:meta {:file "/home/mbp/cljsketch/src/cljsketch/geom.cljs", :line 5, :column 14, :end-line 5, :end-column 19, :doc nil, :protocol-symbol true, :protocol-info {:methods {render [[this ctx highlighted? style]], point-distance2 [[this [x y]]]}}}, :protocol-symbol true, :name cljsketch.geom/IGeom, :file "src/cljsketch/geom.cljs", :end-column 19, :column 1, :line 5, :protocol-info {:methods {render [[this ctx highlighted? style]], point-distance2 [[this [x y]]]}}, :info nil, :end-line 5, :impls #{cljsketch.geom/Circle cljsketch.geom/Point cljsketch.geom/Line cljsketch.geom/Segment cljsketch.geom/Null}, :doc nil}, Null {:num-fields 0, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljsketch.geom/IGeom cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name cljsketch.geom/Null, :file "src/cljsketch/geom.cljs", :end-column 16, :type true, :column 12, :internal-ctor true, :line 10, :record true, :end-line 10, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, render {:protocol-inline nil, :meta {:file "/home/mbp/cljsketch/src/cljsketch/geom.cljs", :line 6, :column 4, :end-line 6, :end-column 10, :protocol cljsketch.geom/IGeom, :doc "render this geom in the given graphics context", :arglists (quote ([this ctx highlighted? style]))}, :protocol cljsketch.geom/IGeom, :name cljsketch.geom/render, :variadic false, :file "src/cljsketch/geom.cljs", :end-column 10, :method-params ([this ctx highlighted? style]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 5, :end-line 6, :max-fixed-arity 4, :fn-var true, :arglists (quote ([this ctx highlighted? style])), :doc "render this geom in the given graphics context"}, ->Circle {:protocol-inline nil, :meta {:file "/home/mbp/cljsketch/src/cljsketch/geom.cljs", :line 50, :column 12, :end-line 50, :end-column 18, :internal-ctor true, :factory :positional, :arglists (quote ([x0 y0 r]))}, :name cljsketch.geom/->Circle, :variadic false, :file "src/cljsketch/geom.cljs", :end-column 18, :method-params ([x0 y0 r]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 50, :end-line 50, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x0 y0 r]))}, Segment {:num-fields 4, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljsketch.geom/IGeom cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name cljsketch.geom/Segment, :file "src/cljsketch/geom.cljs", :end-column 19, :type true, :column 12, :internal-ctor true, :line 40, :record true, :end-line 40, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:r :color :y1 :y0 :x1 :x0 :p :u}, :order [:p :color :u :x0 :y0 :x1 :y1 :r]}, :doc nil}