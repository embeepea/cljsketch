;; Analyzed by ClojureScript 0.0-3297
{:use-macros nil, :excludes #{}, :name cljsketch.vector, :imports nil, :requires nil, :uses nil, :defs {toProjectiveVector {:protocol-inline nil, :meta {:file "/home/mbp/cljsketch/src/cljsketch/vector.cljs", :line 75, :column 4, :end-line 75, :end-column 22, :protocol cljsketch.vector/IAffine, :doc "Convert this object to a ProjectiveVector", :arglists (quote ([this]))}, :protocol cljsketch.vector/IAffine, :name cljsketch.vector/toProjectiveVector, :variadic false, :file "src/cljsketch/vector.cljs", :end-column 22, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 74, :end-line 75, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Convert this object to a ProjectiveVector"}, line-rectangle-intersection {:protocol-inline nil, :meta {:file "/home/mbp/cljsketch/src/cljsketch/vector.cljs", :line 130, :column 7, :end-line 130, :end-column 34, :arglists (quote ([line rect]))}, :name cljsketch.vector/line-rectangle-intersection, :variadic false, :file "src/cljsketch/vector.cljs", :end-column 34, :method-params ([line rect]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 130, :end-line 130, :max-fixed-arity 2, :fn-var true, :arglists (quote ([line rect]))}, dot {:protocol-inline nil, :meta {:file "/home/mbp/cljsketch/src/cljsketch/vector.cljs", :line 40, :column 4, :end-line 40, :end-column 7, :protocol cljsketch.vector/IVectorSpace, :doc "vector dot product", :arglists (quote ([this v]))}, :protocol cljsketch.vector/IVectorSpace, :name cljsketch.vector/dot, :variadic false, :file "src/cljsketch/vector.cljs", :end-column 7, :method-params ([this v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 40, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this v])), :doc "vector dot product"}, l2dist {:protocol-inline nil, :meta {:file "/home/mbp/cljsketch/src/cljsketch/vector.cljs", :line 45, :column 4, :end-line 45, :end-column 10, :protocol cljsketch.vector/IVectorSpace, :doc "L2 dist", :arglists (quote ([this v]))}, :protocol cljsketch.vector/IVectorSpace, :name cljsketch.vector/l2dist, :variadic false, :file "src/cljsketch/vector.cljs", :end-column 10, :method-params ([this v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 45, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this v])), :doc "L2 dist"}, ->AffineVector {:protocol-inline nil, :meta {:file "/home/mbp/cljsketch/src/cljsketch/vector.cljs", :line 78, :column 12, :end-line 78, :end-column 24, :internal-ctor true, :factory :positional, :arglists (quote ([u]))}, :name cljsketch.vector/->AffineVector, :variadic false, :file "src/cljsketch/vector.cljs", :end-column 24, :method-params ([u]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 78, :end-line 78, :max-fixed-arity 1, :fn-var true, :arglists (quote ([u]))}, point-line-distance-squared {:protocol-inline nil, :meta {:file "/home/mbp/cljsketch/src/cljsketch/vector.cljs", :line 200, :column 7, :end-line 200, :end-column 34, :arglists (quote ([aff-point prj-line]))}, :name cljsketch.vector/point-line-distance-squared, :variadic false, :file "src/cljsketch/vector.cljs", :end-column 34, :method-params ([aff-point prj-line]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 200, :end-line 200, :max-fixed-arity 2, :fn-var true, :arglists (quote ([aff-point prj-line]))}, IVectorSpace {:meta {:file "/home/mbp/cljsketch/src/cljsketch/vector.cljs", :line 37, :column 14, :end-line 37, :end-column 26, :doc nil, :protocol-symbol true, :protocol-info {:methods {dot [[this v]], l2dist [[this v]], add [[this v]], l2norm [[this]], unitize [[this]], l2dist2 [[this v]], sub [[this v]], l2norm2 [[this]], mul [[this s]]}}}, :protocol-symbol true, :name cljsketch.vector/IVectorSpace, :file "src/cljsketch/vector.cljs", :end-column 26, :column 1, :line 37, :protocol-info {:methods {dot [[this v]], l2dist [[this v]], add [[this v]], l2norm [[this]], unitize [[this]], l2dist2 [[this v]], sub [[this v]], l2norm2 [[this]], mul [[this s]]}}, :info nil, :end-line 37, :impls #{cljsketch.vector/AffineVector cljsketch.vector/ProjectiveVector}, :doc nil}, ->ProjectiveVector {:protocol-inline nil, :meta {:file "/home/mbp/cljsketch/src/cljsketch/vector.cljs", :line 57, :column 12, :end-line 57, :end-column 28, :internal-ctor true, :factory :positional, :arglists (quote ([u]))}, :name cljsketch.vector/->ProjectiveVector, :variadic false, :file "src/cljsketch/vector.cljs", :end-column 28, :method-params ([u]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 57, :end-line 57, :max-fixed-arity 1, :fn-var true, :arglists (quote ([u]))}, add {:protocol-inline nil, :meta {:file "/home/mbp/cljsketch/src/cljsketch/vector.cljs", :line 38, :column 4, :end-line 38, :end-column 7, :protocol cljsketch.vector/IVectorSpace, :doc "vector addition", :arglists (quote ([this v]))}, :protocol cljsketch.vector/IVectorSpace, :name cljsketch.vector/add, :variadic false, :file "src/cljsketch/vector.cljs", :end-column 7, :method-params ([this v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 38, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this v])), :doc "vector addition"}, point-on-line {:protocol-inline nil, :meta {:file "/home/mbp/cljsketch/src/cljsketch/vector.cljs", :line 97, :column 7, :end-line 97, :end-column 20, :arglists (quote ([point line]))}, :name cljsketch.vector/point-on-line, :variadic false, :file "src/cljsketch/vector.cljs", :end-column 20, :method-params ([point line]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 97, :end-line 97, :max-fixed-arity 2, :fn-var true, :arglists (quote ([point line]))}, cross {:protocol-inline nil, :meta {:file "/home/mbp/cljsketch/src/cljsketch/vector.cljs", :line 50, :column 4, :end-line 50, :end-column 9, :protocol cljsketch.vector/ICross, :doc "Product", :arglists (quote ([this v]))}, :protocol cljsketch.vector/ICross, :name cljsketch.vector/cross, :variadic false, :file "src/cljsketch/vector.cljs", :end-column 9, :method-params ([this v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 49, :end-line 50, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this v])), :doc "Product"}, l2norm {:protocol-inline nil, :meta {:file "/home/mbp/cljsketch/src/cljsketch/vector.cljs", :line 43, :column 4, :end-line 43, :end-column 10, :protocol cljsketch.vector/IVectorSpace, :doc "L2 norm", :arglists (quote ([this]))}, :protocol cljsketch.vector/IVectorSpace, :name cljsketch.vector/l2norm, :variadic false, :file "src/cljsketch/vector.cljs", :end-column 10, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 43, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "L2 norm"}, vsub {:protocol-inline nil, :meta {:file "/home/mbp/cljsketch/src/cljsketch/vector.cljs", :line 3, :column 7, :end-line 3, :end-column 11, :arglists (quote ([u v]))}, :name cljsketch.vector/vsub, :variadic false, :file "src/cljsketch/vector.cljs", :end-column 11, :method-params ([u v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3, :end-line 3, :max-fixed-arity 2, :fn-var true, :arglists (quote ([u v]))}, dotest1 {:protocol-inline nil, :meta {:file "/home/mbp/cljsketch/src/cljsketch/vector.cljs", :line 100, :column 7, :end-line 100, :end-column 14, :arglists (quote ([]))}, :name cljsketch.vector/dotest1, :variadic false, :file "src/cljsketch/vector.cljs", :end-column 14, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 100, :end-line 100, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, unitize {:protocol-inline nil, :meta {:file "/home/mbp/cljsketch/src/cljsketch/vector.cljs", :line 46, :column 4, :end-line 46, :end-column 11, :protocol cljsketch.vector/IVectorSpace, :doc "unit vector in same direction", :arglists (quote ([this]))}, :protocol cljsketch.vector/IVectorSpace, :name cljsketch.vector/unitize, :variadic false, :file "src/cljsketch/vector.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 46, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "unit vector in same direction"}, rectangle-vertices {:protocol-inline nil, :meta {:file "/home/mbp/cljsketch/src/cljsketch/vector.cljs", :line 124, :column 7, :end-line 124, :end-column 25, :arglists (quote ([rect]))}, :name cljsketch.vector/rectangle-vertices, :variadic false, :file "src/cljsketch/vector.cljs", :end-column 25, :method-params ([rect]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 124, :end-line 124, :max-fixed-arity 1, :fn-var true, :arglists (quote ([rect]))}, Projective {:name cljsketch.vector/Projective, :file "src/cljsketch/vector.cljs", :line 35, :column 1, :end-line 35, :end-column 40, :declared true, :meta {:file "/home/mbp/cljsketch/src/cljsketch/vector.cljs", :line 35, :column 30, :end-line 35, :end-column 40, :declared true}}, vunitize {:protocol-inline nil, :meta {:file "/home/mbp/cljsketch/src/cljsketch/vector.cljs", :line 21, :column 7, :end-line 21, :end-column 15, :arglists (quote ([u]))}, :name cljsketch.vector/vunitize, :variadic false, :file "src/cljsketch/vector.cljs", :end-column 15, :method-params ([u]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 1, :fn-var true, :arglists (quote ([u]))}, vmul {:protocol-inline nil, :meta {:file "/home/mbp/cljsketch/src/cljsketch/vector.cljs", :line 7, :column 7, :end-line 7, :end-column 11, :arglists (quote ([u s]))}, :name cljsketch.vector/vmul, :variadic false, :file "src/cljsketch/vector.cljs", :end-column 11, :method-params ([u s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 2, :fn-var true, :arglists (quote ([u s]))}, dotest {:protocol-inline nil, :meta {:file "/home/mbp/cljsketch/src/cljsketch/vector.cljs", :line 152, :column 7, :end-line 152, :end-column 13, :arglists (quote ([]))}, :name cljsketch.vector/dotest, :variadic false, :file "src/cljsketch/vector.cljs", :end-column 13, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 152, :end-line 152, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, point-point-line {:name cljsketch.vector/point-point-line, :file "src/cljsketch/vector.cljs", :line 95, :column 1, :end-line 95, :end-column 22, :meta {:file "/home/mbp/cljsketch/src/cljsketch/vector.cljs", :line 95, :column 6, :end-line 95, :end-column 22}}, l2dist2 {:protocol-inline nil, :meta {:file "/home/mbp/cljsketch/src/cljsketch/vector.cljs", :line 44, :column 4, :end-line 44, :end-column 11, :protocol cljsketch.vector/IVectorSpace, :doc "L2 dist squared", :arglists (quote ([this v]))}, :protocol cljsketch.vector/IVectorSpace, :name cljsketch.vector/l2dist2, :variadic false, :file "src/cljsketch/vector.cljs", :end-column 11, :method-params ([this v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 44, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this v])), :doc "L2 dist squared"}, vaff {:protocol-inline nil, :meta {:file "/home/mbp/cljsketch/src/cljsketch/vector.cljs", :line 25, :column 7, :end-line 25, :end-column 11, :arglists (quote ([u]))}, :name cljsketch.vector/vaff, :variadic false, :file "src/cljsketch/vector.cljs", :end-column 11, :method-params ([u]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 25, :max-fixed-arity 1, :fn-var true, :arglists (quote ([u]))}, affine-direction {:protocol-inline nil, :meta {:file "/home/mbp/cljsketch/src/cljsketch/vector.cljs", :line 168, :column 7, :end-line 168, :end-column 23, :arglists (quote ([pvec]))}, :name cljsketch.vector/affine-direction, :variadic false, :file "src/cljsketch/vector.cljs", :end-column 23, :method-params ([pvec]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 168, :end-line 168, :max-fixed-arity 1, :fn-var true, :arglists (quote ([pvec]))}, vl2norm {:protocol-inline nil, :meta {:file "/home/mbp/cljsketch/src/cljsketch/vector.cljs", :line 15, :column 7, :end-line 15, :end-column 14, :arglists (quote ([u]))}, :name cljsketch.vector/vl2norm, :variadic false, :file "src/cljsketch/vector.cljs", :end-column 14, :method-params ([u]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 1, :fn-var true, :arglists (quote ([u]))}, vdot {:protocol-inline nil, :meta {:file "/home/mbp/cljsketch/src/cljsketch/vector.cljs", :line 9, :column 7, :end-line 9, :end-column 11, :arglists (quote ([u v]))}, :name cljsketch.vector/vdot, :variadic false, :file "src/cljsketch/vector.cljs", :end-column 11, :method-params ([u v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 9, :end-line 9, :max-fixed-arity 2, :fn-var true, :arglists (quote ([u v]))}, point-line-perpendicular {:protocol-inline nil, :meta {:file "/home/mbp/cljsketch/src/cljsketch/vector.cljs", :line 192, :column 7, :end-line 192, :end-column 31, :arglists (quote ([pt ln]))}, :name cljsketch.vector/point-line-perpendicular, :variadic false, :file "src/cljsketch/vector.cljs", :end-column 31, :method-params ([pt ln]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 192, :end-line 192, :max-fixed-arity 2, :fn-var true, :arglists (quote ([pt ln]))}, vadd {:protocol-inline nil, :meta {:file "/home/mbp/cljsketch/src/cljsketch/vector.cljs", :line 5, :column 7, :end-line 5, :end-column 11, :arglists (quote ([u v]))}, :name cljsketch.vector/vadd, :variadic false, :file "src/cljsketch/vector.cljs", :end-column 11, :method-params ([u v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 5, :end-line 5, :max-fixed-arity 2, :fn-var true, :arglists (quote ([u v]))}, sub {:protocol-inline nil, :meta {:file "/home/mbp/cljsketch/src/cljsketch/vector.cljs", :line 39, :column 4, :end-line 39, :end-column 7, :protocol cljsketch.vector/IVectorSpace, :doc "vector subtraction", :arglists (quote ([this v]))}, :protocol cljsketch.vector/IVectorSpace, :name cljsketch.vector/sub, :variadic false, :file "src/cljsketch/vector.cljs", :end-column 7, :method-params ([this v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 39, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this v])), :doc "vector subtraction"}, ICross {:meta {:file "/home/mbp/cljsketch/src/cljsketch/vector.cljs", :line 49, :column 14, :end-line 49, :end-column 20, :doc nil, :protocol-symbol true, :protocol-info {:methods {cross [[this v]]}}}, :protocol-symbol true, :name cljsketch.vector/ICross, :file "src/cljsketch/vector.cljs", :end-column 20, :column 1, :line 49, :protocol-info {:methods {cross [[this v]]}}, :info nil, :end-line 49, :impls #{cljsketch.vector/ProjectiveVector}, :doc nil}, map->Rectangle {:protocol-inline nil, :meta {:file "/home/mbp/cljsketch/src/cljsketch/vector.cljs", :line 122, :column 12, :end-line 122, :end-column 21, :internal-ctor true, :factory :map, :arglists (quote ([G__24655]))}, :name cljsketch.vector/map->Rectangle, :variadic false, :file "src/cljsketch/vector.cljs", :end-column 21, :method-params ([G__24655]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 122, :end-line 122, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__24655]))}, Rectangle {:num-fields 4, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name cljsketch.vector/Rectangle, :file "src/cljsketch/vector.cljs", :end-column 21, :type true, :column 12, :internal-ctor true, :line 122, :record true, :end-line 122, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, Affine {:name cljsketch.vector/Affine, :file "src/cljsketch/vector.cljs", :line 35, :column 1, :end-line 35, :end-column 16, :declared true, :meta {:file "/home/mbp/cljsketch/src/cljsketch/vector.cljs", :line 35, :column 10, :end-line 35, :end-column 16, :declared true}}, vprj {:protocol-inline nil, :meta {:file "/home/mbp/cljsketch/src/cljsketch/vector.cljs", :line 11, :column 7, :end-line 11, :end-column 11, :arglists (quote ([u]))}, :name cljsketch.vector/vprj, :variadic false, :file "src/cljsketch/vector.cljs", :end-column 11, :method-params ([u]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 11, :end-line 11, :max-fixed-arity 1, :fn-var true, :arglists (quote ([u]))}, vl2norm2 {:protocol-inline nil, :meta {:file "/home/mbp/cljsketch/src/cljsketch/vector.cljs", :line 13, :column 7, :end-line 13, :end-column 15, :arglists (quote ([u]))}, :name cljsketch.vector/vl2norm2, :variadic false, :file "src/cljsketch/vector.cljs", :end-column 15, :method-params ([u]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 1, :fn-var true, :arglists (quote ([u]))}, vl2dist {:protocol-inline nil, :meta {:file "/home/mbp/cljsketch/src/cljsketch/vector.cljs", :line 19, :column 7, :end-line 19, :end-column 14, :arglists (quote ([u v]))}, :name cljsketch.vector/vl2dist, :variadic false, :file "src/cljsketch/vector.cljs", :end-column 14, :method-params ([u v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 2, :fn-var true, :arglists (quote ([u v]))}, l2norm2 {:protocol-inline nil, :meta {:file "/home/mbp/cljsketch/src/cljsketch/vector.cljs", :line 42, :column 4, :end-line 42, :end-column 11, :protocol cljsketch.vector/IVectorSpace, :doc "L2 norm squared", :arglists (quote ([this]))}, :protocol cljsketch.vector/IVectorSpace, :name cljsketch.vector/l2norm2, :variadic false, :file "src/cljsketch/vector.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 42, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "L2 norm squared"}, point-line-parallel {:protocol-inline nil, :meta {:file "/home/mbp/cljsketch/src/cljsketch/vector.cljs", :line 175, :column 7, :end-line 175, :end-column 26, :arglists (quote ([pt ln]))}, :name cljsketch.vector/point-line-parallel, :variadic false, :file "src/cljsketch/vector.cljs", :end-column 26, :method-params ([pt ln]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 175, :end-line 175, :max-fixed-arity 2, :fn-var true, :arglists (quote ([pt ln]))}, IProjective {:meta {:file "/home/mbp/cljsketch/src/cljsketch/vector.cljs", :line 53, :column 14, :end-line 53, :end-column 25, :doc nil, :protocol-symbol true, :protocol-info {:methods {toAffineVector [[this]]}}}, :protocol-symbol true, :name cljsketch.vector/IProjective, :file "src/cljsketch/vector.cljs", :end-column 25, :column 1, :line 53, :protocol-info {:methods {toAffineVector [[this]]}}, :info nil, :end-line 53, :impls #{cljsketch.vector/ProjectiveVector}, :doc nil}, map->AffineVector {:protocol-inline nil, :meta {:file "/home/mbp/cljsketch/src/cljsketch/vector.cljs", :line 78, :column 12, :end-line 78, :end-column 24, :internal-ctor true, :factory :map, :arglists (quote ([G__24647]))}, :name cljsketch.vector/map->AffineVector, :variadic false, :file "src/cljsketch/vector.cljs", :end-column 24, :method-params ([G__24647]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 78, :end-line 78, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__24647]))}, linear-opposites? {:protocol-inline nil, :meta {:file "/home/mbp/cljsketch/src/cljsketch/vector.cljs", :line 208, :column 7, :end-line 208, :end-column 24, :arglists (quote ([a b]))}, :name cljsketch.vector/linear-opposites?, :variadic false, :file "src/cljsketch/vector.cljs", :end-column 24, :method-params ([a b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 208, :end-line 208, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a b]))}, vl2dist2 {:protocol-inline nil, :meta {:file "/home/mbp/cljsketch/src/cljsketch/vector.cljs", :line 17, :column 7, :end-line 17, :end-column 15, :arglists (quote ([u v]))}, :name cljsketch.vector/vl2dist2, :variadic false, :file "src/cljsketch/vector.cljs", :end-column 15, :method-params ([u v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 17, :end-line 17, :max-fixed-arity 2, :fn-var true, :arglists (quote ([u v]))}, affine-perpendicular {:protocol-inline nil, :meta {:file "/home/mbp/cljsketch/src/cljsketch/vector.cljs", :line 162, :column 7, :end-line 162, :end-column 27, :arglists (quote ([avec]))}, :name cljsketch.vector/affine-perpendicular, :variadic false, :file "src/cljsketch/vector.cljs", :end-column 27, :method-params ([avec]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 162, :end-line 162, :max-fixed-arity 1, :fn-var true, :arglists (quote ([avec]))}, mul {:protocol-inline nil, :meta {:file "/home/mbp/cljsketch/src/cljsketch/vector.cljs", :line 41, :column 4, :end-line 41, :end-column 7, :protocol cljsketch.vector/IVectorSpace, :doc "scalar multiplication", :arglists (quote ([this s]))}, :protocol cljsketch.vector/IVectorSpace, :name cljsketch.vector/mul, :variadic false, :file "src/cljsketch/vector.cljs", :end-column 7, :method-params ([this s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 41, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this s])), :doc "scalar multiplication"}, ->Rectangle {:protocol-inline nil, :meta {:file "/home/mbp/cljsketch/src/cljsketch/vector.cljs", :line 122, :column 12, :end-line 122, :end-column 21, :internal-ctor true, :factory :positional, :arglists (quote ([xMin yMin xMax yMax]))}, :name cljsketch.vector/->Rectangle, :variadic false, :file "src/cljsketch/vector.cljs", :end-column 21, :method-params ([xMin yMin xMax yMax]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 122, :end-line 122, :max-fixed-arity 4, :fn-var true, :arglists (quote ([xMin yMin xMax yMax]))}, map->ProjectiveVector {:protocol-inline nil, :meta {:file "/home/mbp/cljsketch/src/cljsketch/vector.cljs", :line 57, :column 12, :end-line 57, :end-column 28, :internal-ctor true, :factory :map, :arglists (quote ([G__24637]))}, :name cljsketch.vector/map->ProjectiveVector, :variadic false, :file "src/cljsketch/vector.cljs", :end-column 28, :method-params ([G__24637]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 57, :end-line 57, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__24637]))}, line-line-intersection {:name cljsketch.vector/line-line-intersection, :file "src/cljsketch/vector.cljs", :line 93, :column 1, :end-line 93, :end-column 28, :meta {:file "/home/mbp/cljsketch/src/cljsketch/vector.cljs", :line 93, :column 6, :end-line 93, :end-column 28}}, toAffineVector {:protocol-inline nil, :meta {:file "/home/mbp/cljsketch/src/cljsketch/vector.cljs", :line 54, :column 4, :end-line 54, :end-column 18, :protocol cljsketch.vector/IProjective, :doc "Convert this object to an AffineVector", :arglists (quote ([this]))}, :protocol cljsketch.vector/IProjective, :name cljsketch.vector/toAffineVector, :variadic false, :file "src/cljsketch/vector.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 53, :end-line 54, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Convert this object to an AffineVector"}, point-dir-line {:protocol-inline nil, :meta {:file "/home/mbp/cljsketch/src/cljsketch/vector.cljs", :line 183, :column 7, :end-line 183, :end-column 21, :arglists (quote ([pt dir]))}, :name cljsketch.vector/point-dir-line, :variadic false, :file "src/cljsketch/vector.cljs", :end-column 21, :method-params ([pt dir]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 183, :end-line 183, :max-fixed-arity 2, :fn-var true, :arglists (quote ([pt dir]))}, square {:protocol-inline nil, :meta {:file "/home/mbp/cljsketch/src/cljsketch/vector.cljs", :line 23, :column 7, :end-line 23, :end-column 13, :arglists (quote ([x]))}, :name cljsketch.vector/square, :variadic false, :file "src/cljsketch/vector.cljs", :end-column 13, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, ProjectiveVector {:meta {:file "/home/mbp/cljsketch/src/cljsketch/vector.cljs", :line 35, :column 41, :end-line 35, :end-column 57, :declared true}, :num-fields 1, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljsketch.vector/ICross cljsketch.vector/IProjective cljsketch.vector/IVectorSpace cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name cljsketch.vector/ProjectiveVector, :file "src/cljsketch/vector.cljs", :end-column 28, :type true, :column 12, :internal-ctor true, :line 57, :record true, :declared true, :end-line 57, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, AffineVector {:meta {:file "/home/mbp/cljsketch/src/cljsketch/vector.cljs", :line 35, :column 17, :end-line 35, :end-column 29, :declared true}, :num-fields 1, :protocols #{cljs.core/IRecord cljsketch.vector/IAffine cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljsketch.vector/IVectorSpace cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name cljsketch.vector/AffineVector, :file "src/cljsketch/vector.cljs", :end-column 24, :type true, :column 12, :internal-ctor true, :line 78, :record true, :declared true, :end-line 78, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, point-segment-distance2 {:protocol-inline nil, :meta {:file "/home/mbp/cljsketch/src/cljsketch/vector.cljs", :line 219, :column 7, :end-line 219, :end-column 30, :arglists (quote ([a b c]))}, :name cljsketch.vector/point-segment-distance2, :variadic false, :file "src/cljsketch/vector.cljs", :end-column 30, :method-params ([a b c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 219, :end-line 219, :max-fixed-arity 3, :fn-var true, :arglists (quote ([a b c]))}, ordered-collinear-triple? {:protocol-inline nil, :meta {:file "/home/mbp/cljsketch/src/cljsketch/vector.cljs", :line 213, :column 7, :end-line 213, :end-column 32, :arglists (quote ([a b c]))}, :name cljsketch.vector/ordered-collinear-triple?, :variadic false, :file "src/cljsketch/vector.cljs", :end-column 32, :method-params ([a b c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 213, :end-line 213, :max-fixed-arity 3, :fn-var true, :arglists (quote ([a b c]))}, vcross {:protocol-inline nil, :meta {:file "/home/mbp/cljsketch/src/cljsketch/vector.cljs", :line 30, :column 7, :end-line 30, :end-column 13, :arglists (quote ([[x0 y0 z0] [x1 y1 z1]]))}, :name cljsketch.vector/vcross, :variadic false, :file "src/cljsketch/vector.cljs", :end-column 13, :method-params ([p__24623 p__24624]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 30, :end-line 30, :max-fixed-arity 2, :fn-var true, :arglists (quote ([[x0 y0 z0] [x1 y1 z1]]))}, IAffine {:meta {:file "/home/mbp/cljsketch/src/cljsketch/vector.cljs", :line 74, :column 14, :end-line 74, :end-column 21, :doc nil, :protocol-symbol true, :protocol-info {:methods {toProjectiveVector [[this]]}}}, :protocol-symbol true, :name cljsketch.vector/IAffine, :file "src/cljsketch/vector.cljs", :end-column 21, :column 1, :line 74, :protocol-info {:methods {toProjectiveVector [[this]]}}, :info nil, :end-line 74, :impls #{cljsketch.vector/AffineVector}, :doc nil}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:yMax :last-vert :xMin :else :xMax :last-sign :hits :yMin :u}, :order [:u :xMin :yMin :xMax :yMax :hits :last-sign :last-vert :else]}, :doc nil}