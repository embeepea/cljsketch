;; Analyzed by ClojureScript 0.0-3297
{:use-macros nil, :excludes #{}, :name cljsketch.util, :imports nil, :requires {v cljsketch.vector, cljsketch.vector cljsketch.vector}, :uses nil, :defs {compute-line {:protocol-inline nil, :meta {:file "/home/mbp/cljsketch/src/cljsketch/util.cljs", :line 4, :column 7, :end-line 4, :end-column 19, :arglists (quote ([geom]))}, :name cljsketch.util/compute-line, :variadic false, :file "src/cljsketch/util.cljs", :end-column 19, :method-params ([geom]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 4, :end-line 4, :max-fixed-arity 1, :fn-var true, :arglists (quote ([geom]))}, square {:protocol-inline nil, :meta {:file "/home/mbp/cljsketch/src/cljsketch/util.cljs", :line 24, :column 7, :end-line 24, :end-column 13, :arglists (quote ([x]))}, :name cljsketch.util/square, :variadic false, :file "src/cljsketch/util.cljs", :end-column 13, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 24, :end-line 24, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, is-within-threshold? {:protocol-inline nil, :meta {:file "/home/mbp/cljsketch/src/cljsketch/util.cljs", :line 26, :column 7, :end-line 26, :end-column 27, :arglists (quote ([[px py] geom t]))}, :name cljsketch.util/is-within-threshold?, :variadic false, :file "src/cljsketch/util.cljs", :end-column 27, :method-params ([p__61481 geom t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 26, :end-line 26, :max-fixed-arity 3, :fn-var true, :arglists (quote ([[px py] geom t]))}, is-selected? {:protocol-inline nil, :meta {:file "/home/mbp/cljsketch/src/cljsketch/util.cljs", :line 49, :column 7, :end-line 49, :end-column 19, :arglists (quote ([geom]))}, :name cljsketch.util/is-selected?, :variadic false, :file "src/cljsketch/util.cljs", :end-column 19, :method-params ([geom]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 49, :end-line 49, :max-fixed-arity 1, :fn-var true, :arglists (quote ([geom]))}, selected {:protocol-inline nil, :meta {:file "/home/mbp/cljsketch/src/cljsketch/util.cljs", :line 52, :column 7, :end-line 52, :end-column 15, :arglists (quote ([geom]))}, :name cljsketch.util/selected, :variadic false, :file "src/cljsketch/util.cljs", :end-column 15, :method-params ([geom]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 52, :end-line 52, :max-fixed-arity 1, :fn-var true, :arglists (quote ([geom]))}, unselected {:protocol-inline nil, :meta {:file "/home/mbp/cljsketch/src/cljsketch/util.cljs", :line 54, :column 7, :end-line 54, :end-column 17, :arglists (quote ([geom]))}, :name cljsketch.util/unselected, :variadic false, :file "src/cljsketch/util.cljs", :end-column 17, :method-params ([geom]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 54, :end-line 54, :max-fixed-arity 1, :fn-var true, :arglists (quote ([geom]))}, toggle-selected {:protocol-inline nil, :meta {:file "/home/mbp/cljsketch/src/cljsketch/util.cljs", :line 56, :column 7, :end-line 56, :end-column 22, :arglists (quote ([geom]))}, :name cljsketch.util/toggle-selected, :variadic false, :file "src/cljsketch/util.cljs", :end-column 22, :method-params ([geom]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 56, :end-line 56, :max-fixed-arity 1, :fn-var true, :arglists (quote ([geom]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:selected :coords :type :points :perpendicular-line :endpoints :line :segment :point :parallel-line}, :order [:points :coords :perpendicular-line :point :parallel-line :type :line :segment :endpoints :selected]}, :doc nil}